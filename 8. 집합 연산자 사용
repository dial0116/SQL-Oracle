/*
8. 집합 연산자 사용
select1, select2 의 행의 결과치 비교
cf. join (같은 행으로 결과 반환) 과 달리 select 1,2 행이 따로따로 행으로 나타남
union(합집합) <-> union all(교집합 중복된 채로 그대로 반환), intersect, minus
-★select 에서 선택하는 칼럼의 개수와 앞뒤 select에서 사용한 데이터 유형은 같아야 함
-위에서 아래로 순서대로 연산함, 우선순위 변경은 괄호로 함
-order by 명령어는 맨 마지막 select 절에만 한번만 올 수 있음
-최종 반환되는 칼럼의 머리글과 order by 에 쓰이는 칼럼은 첫번째 select절의 칼럼만 
-대부분 
union all: 순차적으로 display <-> 이를 제외한 연산자들은 select 절에 쓰여진 모든 칼럼에 대해 정렬작업 후 중복제거. 따라서 자동적으로 정렬됨
*/

--수업코드 8
select department_id, first_name, last_name, salary
from employees
where department_id=110
union 
select employee_id, first_name, last_name, commission_pct
from employees
where salary>=15000
order by salary; --department_id 칼럼에 department_id와 employee_id 모두 표현함

select employee_id, job_id
from job_history
minus
select employee_id, job_id 
from employees;

select location_id, department_name, null --'0'과 같은 명시적 값 삽입
from departments
union
select location_id, null, city
from locations;

--연습문제 8
select distinct job_id, department_id --결합 칼럼에 대해 중복된 값 제거
from employees
where department_id = 10
union all
select distinct job_id, department_id
from employees
where department_id = 50
union all 
select distinct job_id, department_id
from employees
where department_id = 30;

select * from countries;
select * from locations;
select country_id, country_name
from countries
minus
select c.country_id, country_name
from locations l, countries c
where l.country_id=c.country_id  --★조인의 조건절
and l.location_id in (select d.location_id from departments d, employees e where d.department_id=e.department_id);

select * from locations;
select country_id, country_name
from countries
minus
select l.country_id, c.country_name
from countries c, locations l, departments d, employees e --조인을 활용
where c.country_id=l.country_id and l.location_id=d.location_id and d.department_id=e.department_id;
